<!-- src/main/resources/mapper/chat/chat_mapper.xml -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ChatMapper">
<!-- 기존: 결과 매핑 -->
    <resultMap id="ChatRoomResultMap" type="com.app.chatapp.dto.ChatRoomDTO">
        <id property="roomId" column="room_id"/>
        <result property="user1Id" column="user1_id"/>
        <result property="user2Id" column="user2_id"/>
        <result property="user1Active" column="user1_active"/>
        <result property="user2Active" column="user2_active"/>
    </resultMap>

    <!-- 기존: 메시지 조회 -->
    <select id="getMessagesByRoomId" resultType="map">
        SELECT message_id, room_id, sender_id, content, image_urls, sent_at
        FROM chat_messages
        WHERE room_id = #{roomId}
        ORDER BY sent_at DESC
        OFFSET #{offset} ROWS FETCH NEXT #{size} ROWS ONLY
    </select>

  <!-- 기존 + [확장]: 메시지 저장 (IDENTITY 반영, 이미지 처리 개선) -->
    <insert id="saveMessage" parameterType="map" keyProperty="messageId" keyColumn="message_id">
        INSERT INTO chat_messages (room_id, sender_id, content, image_urls)
        VALUES (#{roomId}, #{senderId}, #{content}, 
            <if test="imageUrls != null">
                SUBSTR(#{imageUrls}, 1, 4000) <!-- [확장] 길이 제한 -->
            </if>
            <if test="imageUrls == null">
                NULL
            </if>
        )
        <selectKey keyProperty="messageId" resultType="long" order="AFTER">
            SELECT message_id 
            FROM chat_messages 
            WHERE room_id = #{roomId} 
            AND sender_id = #{senderId} 
            AND (content = #{content} OR (content IS NULL AND #{content} IS NULL)) 
            AND (image_urls = SUBSTR(#{imageUrls}, 1, 4000) OR (image_urls IS NULL AND #{imageUrls} IS NULL))
            AND sent_at = (SELECT MAX(sent_at) FROM chat_messages 
                           WHERE room_id = #{roomId} 
                           AND sender_id = #{senderId})
        </selectKey>
    </insert>

    <!-- 기존: 이미지 URL 저장 -->
    <insert id="saveImageUrl" parameterType="map">
        INSERT INTO chat_images (message_id, image_url)
        VALUES (#{messageId}, #{imageUrl})
    </insert>

    <!-- 기존: 타겟 사용자 ID 조회 -->
    <select id="getTargetUserId" parameterType="map" resultType="string">
        SELECT CASE
            WHEN user1_id = #{senderId} THEN user2_id
            ELSE user1_id
        END AS target_user_id
        FROM chat_rooms
        WHERE room_id = #{roomId}
    </select>

    <!-- 기존: 메시지 읽음 처리 -->
    <update id="markMessageAsRead" parameterType="long">
        UPDATE chat_messages
        SET read_status = 'Y'
        WHERE message_id = #{messageId}
    </update>

    <!-- 기존: 채팅방 목록 조회 -->
    <select id="getChatRooms" parameterType="string" resultMap="ChatRoomResultMap">
        SELECT room_id, user1_id, user2_id, user1_active, user2_active
        FROM chat_rooms
        WHERE (user1_id = #{userId} AND user1_active = 'Y') OR (user2_id = #{userId} AND user2_active = 'Y')
    </select>

    <!-- 기존: 채팅방 떠나기 -->
    <update id="leaveChatRoom" parameterType="map">
        UPDATE chat_rooms
        SET 
            user1_active = CASE WHEN user1_id = #{userId} THEN 'N' ELSE user1_active END,
            user2_active = CASE WHEN user2_id = #{userId} THEN 'N' ELSE user2_active END
        WHERE room_id = #{roomId}
    </update>

    <!-- 기존: 사용자별 채팅방 조회 -->
    <select id="findChatRoomByUsers" parameterType="map" resultMap="ChatRoomResultMap">
        SELECT room_id, user1_id, user2_id, user1_active, user2_active
        FROM chat_rooms
        WHERE (user1_id = #{user1Id} AND user2_id = #{user2Id})
           OR (user1_id = #{user2Id} AND user2_id = #{user1Id})
    </select>

   <!-- 기존 + [확장]: 채팅방 생성 (room_id 명시적 삽입) -->
    <insert id="createChatRoom" parameterType="com.app.chatapp.dto.ChatRoomDTO" keyProperty="roomId" keyColumn="room_id">
        INSERT INTO chat_rooms (room_id, user1_id, user2_id, user1_active, user2_active)
        VALUES (CHAT_ROOMS_SEQ.NEXTVAL, #{user1Id}, #{user2Id}, #{user1Active}, #{user2Active})
        <selectKey keyProperty="roomId" resultType="long" order="AFTER">
            SELECT CHAT_ROOMS_SEQ.CURRVAL FROM dual
        </selectKey>
    </insert>

    <!-- 기존: 채팅방 삭제 -->
    <delete id="deleteChatRoom" parameterType="map">
        DELETE FROM chat_rooms
        WHERE room_id = #{roomId}
    </delete>

    <!-- 기존: 채팅방 메시지 삭제 -->
    <delete id="deleteMessagesByRoomId" parameterType="long">
        DELETE FROM chat_messages
        WHERE room_id = #{roomId}
    </delete>
</mapper>