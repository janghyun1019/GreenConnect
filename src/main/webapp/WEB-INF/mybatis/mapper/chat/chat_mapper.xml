<!-- src/main/resources/mapper/chat/chat_mapper.xml -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ChatMapper">
<!-- 메시지 조회 -->
    <!-- 메시지 조회 -->
    <select id="getMessagesByRoomId" resultType="map">
        SELECT message_id, room_id, sender_id, content, image_urls, sent_at, read_by_receiver as "read"
        FROM chat_message
        WHERE room_id = #{roomId}
        ORDER BY sent_at DESC
        OFFSET #{offset} ROWS FETCH NEXT #{size} ROWS ONLY
    </select>

    <!-- 메시지 저장 -->
    <insert id="saveMessage" parameterType="ChatRoom">
        INSERT INTO chat_message (message_id, room_id, sender_id, content, image_urls, sent_at)
        VALUES (chat_message_seq.NEXTVAL, #{roomId}, #{senderId}, #{content}, #{imageUrls}, SYSTIMESTAMP)
        <selectKey keyProperty="messageId" resultType="long" order="AFTER">
            SELECT chat_message_seq.CURRVAL FROM dual
        </selectKey>
    </insert>

    <!-- 마지막 메시지 ID 조회 (필요 시 사용) -->
    <select id="getLastMessageId" resultType="long">
        SELECT chat_message_seq.CURRVAL FROM dual
    </select>

    <!-- 타겟 사용자 ID 조회 -->
    <select id="getTargetUserId" resultType="string">
        SELECT CASE WHEN #{senderId} = user1_id THEN user2_id ELSE user1_id END
        FROM chat_room
        WHERE room_id = #{roomId}
    </select>

    <!-- 메시지 읽음 처리 -->
    <update id="markMessageAsRead">
        UPDATE chat_message SET read_by_receiver = 'Y' WHERE message_id = #{messageId}
    </update>

    <!-- 채팅방 목록 조회 -->
    <select id="getChatRooms" resultType="ChatRoom">
        SELECT room_id, user1_id, user2_id, user1_active, user2_active, created_at
        FROM chat_room
        WHERE (user1_id = #{userId} AND user1_active = 'Y') OR (user2_id = #{userId} AND user2_active = 'Y')
    </select>

    <!-- 채팅방 나가기 -->
    <update id="leaveChatRoom">
        UPDATE chat_room
        SET user1_active = CASE WHEN user1_id = #{userId} THEN 'N' ELSE user1_active END,
            user2_active = CASE WHEN user2_id = #{userId} THEN 'N' ELSE user2_active END
        WHERE room_id = #{roomId}
    </update>

    <!-- 채팅방 생성 -->
    <insert id="createChatRoom" parameterType="ChatRoom">
        INSERT INTO chat_room (user1_id, user2_id, user1_active, user2_active)
        VALUES (#{user1Id}, #{user2Id}, #{user1Active}, #{user2Active})
        <selectKey keyProperty="roomId" resultType="long" order="AFTER">
            SELECT chat_room_seq.CURRVAL FROM dual
        </selectKey>
    </insert>

    <!-- 사용자 쌍으로 채팅방 조회 -->
    <select id="findChatRoomByUsers" resultType="ChatRoom">
        SELECT room_id, user1_id, user2_id, user1_active, user2_active, created_at
        FROM chat_room
        WHERE (user1_id = #{user1Id} AND user2_id = #{user2Id}) OR (user1_id = #{user2Id} AND user2_id = #{user1Id})
    </select>
</mapper>