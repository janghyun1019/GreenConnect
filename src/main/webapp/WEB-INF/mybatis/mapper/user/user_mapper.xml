<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="User_mapper">
	<!-- 사용자 목록 조회 (관리자용) -->
	<select id="getUserList" resultType="User">
		SELECT user_id AS userId, username AS userName, role, status, created_at AS
		regDate
		FROM USERS
	</select>

	<!-- 사용자 권한 수정 -->
	<update id="updateUserRole" parameterType="User">
		UPDATE users
		SET role = #{role}
		WHERE user_id = #{userId}
	</update>

	<!-- 사용자 계정 정지 -->
	<update id="suspendUser" parameterType="User">
		UPDATE users
		SET status = #{status}
		WHERE user_id = #{userId}
	</update>

	<!-- 사용자 활동 로그 조회 -->
	<select id="getUserActivityLog" parameterType="String"
		resultType="map">
		SELECT user_id AS userId, username AS userName, role, status, created_at AS
		regDate
		FROM users
		WHERE user_id = #{userId}
	</select>

	<!-- 사용자 정보 조회 -->
	<select id="getUserInfo" resultType="User">
		SELECT user_id AS userId, username AS userName, email, tel, nickname
		FROM users
		WHERE user_id = #{userId}
	</select>

	<!-- 사용자 정보 업데이트 -->
	<update id="updateUserInfo" parameterType="User">
		UPDATE users
		SET username = #{userName},
		email = #{email},
		tel = #{tel},
		<if test="password != null">
			password = #{password},
		</if>
		WHERE user_id = #{userId}
	</update>

	<!-- 사용자 상세 조회 -->
	<select id="getUserDetail" resultType="User">
		SELECT user_id AS userId,
		username AS userName,
		email,
		tel,
		nickname,
		profile_image AS profileImage
		FROM users
		WHERE user_id = #{userId}
	</select>

	<!-- 사용자 추가 -->
	<insert id="insertUser" parameterType="User">
		INSERT INTO users (user_id, password, username, nickname, email, tel,
		user_type)
		VALUES (#{userId}, #{password}, #{userName}, #{nickName}, #{email}, #{tel},
		#{userType})
	</insert>

	<!-- 사용자 삭제 -->
	<delete id="deleteUser" parameterType="User">
		DELETE FROM users
		WHERE user_id = #{userId}
	</delete>

	<update id="updateUser" parameterType="User">
		UPDATE users
		SET username=
		#{userName}, nickname=#{nickName},password=#{password},
		email= #{email}, tel=
		#{tel}, jumin=#{jumin}
		, user_type=#{userType}
		WHERE user_id = #{userId}
	</update>


	<select id="getAllUsers" resultType="User">
		SELECT * FROM users
	</select>

	<select id="getUserByNickname" resultType="User">
		SELECT * FROM users
		WHERE nickname = #{nickName}
	</select>

	<select id="getUserByJumin" resultType="User">
		SELECT * FROM users WHERE
		jumin = #{jumin}
	</select>

	<select id="getUserByTel" resultType="User">
		SELECT * FROM users WHERE
		tel = #{tel}
	</select>

	<select id="getUserByEmail" resultType="User">
		SELECT * FROM users WHERE
		email = #{email}
	</select>

	<select id="getUserBypassword" resultType="User">
		SELECT * FROM users
		WHERE password
		= #{password}

	</select>

	<select id="getUserLists" resultType="User">
		select *
		from users
	</select>

	<select id="getNotifyUserList" resultType="User">
		SELECT user_id AS
		userId, username AS userName, nickname AS nickName,
		email, tel,
		user_type AS userType, report
		FROM users
		WHERE report IS NOT NULL
		ORDER
		BY report DESC
	</select>

	<select id="getUserById" resultType="User">
		SELECT * FROM users WHERE
		user_id = #{userId}
	</select>

	<update id="modifyUser" parameterType="User">
		UPDATE users
		SET
		user_type =
		#{userType}
		WHERE user_id = #{userId}
	</update>
	
	<update id="passwordUpdate" parameterType="map">
		UPDATE users
		SET
		password = #{password}
		WHERE user_id = #{userId}
	</update>

	<select id="isDuplUser" parameterType="map" resultType="int">
		SELECT COUNT(*) FROM users WHERE ${type} = #{value}
	</select>
	

	<update id="updateUser" parameterType="User">
		UPDATE users
		SET username=
		#{userName}, nickname=#{nickName},<!--  password=#{password}, -->
		email= #{email}, tel=
		#{tel}<!-- , jumin=#{jumin} -->, user_type=#{userType}
		WHERE user_id = #{userId}
	</update>

	<delete id="deleteUser" parameterType="User">
		DELETE FROM users WHERE
		user_id = #{userId}
	</delete>

	<select id="getAllUsers" resultType="User">
		SELECT * FROM users
	</select>

	<select id="getUserByNickname" resultType="User">
		SELECT * FROM users
		WHERE nickname = #{nickName}
	</select>

	<select id="getUserByJumin" resultType="User">
		SELECT * FROM users WHERE
		jumin = #{jumin}
	</select>

	<select id="getUserByTel" resultType="User">
		SELECT * FROM users WHERE
		tel = #{tel}
	</select>

	<select id="getUserByEmail" resultType="User">
		SELECT * FROM users WHERE
		email = #{email}
	</select>

	<select id="getUserBypassword" resultType="User">
		SELECT * FROM users WHERE password
		= #{password}

	</select>

	<select id="getUserList" resultType="User">
		select *
		from users
	</select>

	<select id="getUserLists" resultType="User">
		select *
		from users
	</select>

	<select id="getNotifyUserList" resultType="User">
		SELECT user_id AS
		userId, username AS userName, nickname AS nickName,
		email, tel,
		user_type AS userType, report
		FROM users
		WHERE report IS NOT NULL
		ORDER
		BY report DESC
	</select>

	<select id="getUserById" resultType="User">
		SELECT * FROM users WHERE
		user_id = #{userId}
	</select>
	
	<update id="resetReport" parameterType="java.util.List">
		UPDATE users
		SET report = NULL
		WHERE user_id IN
		<foreach item="id" collection="list" open="(" separator=","
			close=")">
			#{id}
		</foreach>
	</update>
	
	<!-- username으로 사용자 조회 -->
    <select id="getUserByUsername" resultType="User">
		SELECT * FROM users WHERE
		username = #{username}
	</select>


</mapper>
